from django.shortcuts import render
from django.http import HttpResponse, HttpResponseRedirect
from .forms import *
import hashlib
import json

from rest_framework.authentication import SessionAuthentication, BasicAuthentication
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView

from rest_framework.decorators import api_view, permission_classes
#—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ö—Ä–∞–Ω—è—Ç—å—Å—è –ø–æ –∞–¥—Ä–µ—Å—É NewsSite\Main\site_pages
# —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç - login: AMOGUS pass:  9E6-rH9-Ad9-FE6


from rest_framework.views import APIView
from rest_framework.response import Response


class Index(APIView):

    permission_classes = (IsAuthenticated,)
    def get(self, request):
        content = {'message': 'Hello, World!'}
        return Response(content)



def registration_page(request): # 127.0.0.1:8000/reg/
    if request.method == 'GET':
        return render(request, 'reg.html', { 'reg': RegForm() })
    elif request.method == 'POST':
        regform = RegForm(request.POST)
        if regform.is_valid():
            try:
                User_count = Users.objects.filter(Login =regform.cleaned_data['Login']).count()
                if User_count > 0:
                    return render(request, 'reg.html', {'reg': RegForm(), 'error': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Login —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ !'})
                else:
                    user = regform.save(commit=False)
                    user.password = hashlib.sha256(bytes(regform.cleaned_data['password'], 'utf-8')).hexdigest()
                    user.save()
            except:
                return render(request, 'reg.html', { 'reg': RegForm(), 'error': '—É–ø—Å, –≥–¥–µ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–æ—á–∫–∞ üò®'} )
        else:
            try:
                regform.clean()
            except Exception as ex:
                return render(request, 'reg.html', {'reg': RegForm(), 'error': ex.args[0]})

        return HttpResponse('–í—ã —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üòé')

def login_page(request): # 127.0.0.1:8000/log/
    if request.method == 'GET':
        return render(request, 'login.html', {'login': LoginFrom()})
    elif request.method == 'POST':
        loginform = LoginFrom(request.POST)
        if loginform.is_valid():
            try:
                login = loginform.cleaned_data['Login']
                password = hashlib.sha256(bytes(loginform.cleaned_data['password'], 'utf-8')).hexdigest()
                #print(password)
                User_count = Users.objects.filter(Login=login, password=password)

                if len(User_count) > 0:
                    return HttpResponse(f'–≤—ã –≤–æ—à–ª–∏')
                else:
                    return render(request, 'login.html', {'login': LoginFrom(), 'error': '—Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç Ô∏èüêíÔ∏è –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π üêíÔ∏è'})
            except Exception as ex:
                #print(ex.args[0])
                return render(request, 'login.html', {'login': LoginFrom(), 'error': '—É–ø—Å, –≥–¥–µ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–æ—á–∫–∞ ‚òï'})
    return HttpResponse('–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ üï∑üï∏')


def index(request): # 127.0.0.1:8000/

    log = True
    #log = False

    posts = Posts.objects.order_by('-id')[0:10] #posts = Posts.objects.filter(id__range =(0, 10))

    shadowlogin = ShadowLoginForm(request.POST)

    if shadowlogin.is_valid():
        try:
            user = shadowlogin.check_access()
        except Exception as ex:
            return render(request, 'main_page.html', {'posts': posts, 'log': log })

    return render(request, 'main_page.html', { 'posts' : posts, 'log' : log } )

def post_create_page(request): # 127.0.0.1:8000/create_post/
    if request.method == 'POST':
        shadowlogin = ShadowLoginForm(request.POST)
        createpostfrom = PostForm(request.POST)

        if shadowlogin.is_valid():
            try:
                user = shadowlogin.check_access()
                if createpostfrom.is_valid():

                    post = createpostfrom.save(commit=False)
                    post.UserID = user
                    post.save()

                    return  HttpResponse('–≤—Å—ë –ø—Ä–æ—à–ª–æ –≥–ª–∞–¥–∫–æ ‚úî')
                else:
                    return HttpResponse('—Ñ–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é ‚ùå')

            except Exception as ex:
                return HttpResponse(f'–æ—à–∏–±–∫–∞: –Ω–µ –æ—á–µ–Ω—å –æ–∫–µ–π ‚ùå {ex.args[0]}')

        else:
            return HttpResponse('–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –ø–æ–≤—ã—Å—å—Ç–µ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏')

    if request.method == 'GET':
        return render(request, 'create_post.html', { 'create_post' : PostForm(), 'shadow_login' : ShadowLoginForm() })


def post(request): # 127.0.0.1:8000/post/

    if request.method == 'GET':
        try:
            id = int(request.GET['postid'])
            post = Posts.objects.get(id=id)
            return render(request, 'post_by_id.html', { 'post' : post, 'comentform': commentform, 'shadow_login' : ShadowLoginForm()})
        except Exception as ex:
            return HttpResponse(f'–æ—à–∏–±–∫–∞ {ex.args[0]}')

    if request.method == 'POST': # –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        try:
            id = int(request.GET['postid'].replace('/', ''))
            post = Posts.objects.get(id=id)

            comform = commentform(request.POST)
            shadowlogin = ShadowLoginForm(request.POST)

            if shadowlogin.is_valid():
                try:
                    user = shadowlogin.check_access()
                    if comform.is_valid():

                        comment = comform.save(commit=False)

                        comment.PostID = post;

                        comment.UserID = user;
                        comment.save();

                        return render(request, 'post_by_id.html', {'post': post, 'comentform': commentform, 'shadow_login': ShadowLoginForm()})
                    else:
                        return HttpResponse('—Ñ–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é ‚ùå')

                except Exception as ex:
                    return HttpResponse(f'–æ—à–∏–±–∫–∞: –Ω–µ –æ—á–µ–Ω—å –æ–∫–µ–π ‚ùå {ex.args[0]}')

            else:
                return HttpResponse('–Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –ø–æ–≤—ã—Å—å—Ç–µ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏')


            return render(request, 'post_by_id.html', {'post': post, 'comentform': commentform})
        except Exception as ex:
            return render(request, 'post_by_id.html', {'post': post, 'comentform': commentform, 'error': ex.args[0]})


def post_by_category(request): # 127.0.0.1:8000/post/category/
    try:
        id = int(request.GET['cid']) # –≤ –±–∞–∑–µ –µ—Å—Ç—å 9 –∏ 3
        posts = Posts.objects.filter(CategoryID=PostCategory.objects.get(id=id))
        return render(request, 'get_post_by_category.html', {'posts' : posts})

    except Exception as ex:
        print(ex.args[0])
        return HttpResponse(ex.args[0])

def get_comments(request): # 127.0.0.1:8000/post/get_comments
    if request.method == 'GET':
        try:
            post_id = int(request.GET['cid'])
            coments = Comments.objects.filter(PostID = post_id).order_by('-Datee')
            to_return = { 'comments' : [] }
            for com in coments:
                if com.ParentCommentID is None:
                    to_return['comments'].append( { 'id': str(com.id) ,'text' : str(com.CommentText), 'dat' : str(com.Datee)[0:19], 'name' : com.UserID.Login, 'parent' : com.ParentCommentID } )
                else:
                    pass

            return HttpResponse( json.dumps(to_return, ensure_ascii=False)); # json.dumps( {'sus' : ['dfdf', 'fdfdf', 'dfdds'] } | json.dumps(coments.__dict__)
        except Exception as ex:
            return HttpResponse(f"–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ {ex.args[0]}")

def logout(request):
    return render(request, 'logout.html')