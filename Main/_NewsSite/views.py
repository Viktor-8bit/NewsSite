from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render
from .forms import *
import hashlib
import json

from rest_framework.authentication import SessionAuthentication, BasicAuthentication
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from django.shortcuts import redirect

from rest_framework.decorators import api_view, permission_classes
from rest_framework.authtoken.models import Token
from rest_framework import serializers


from django.contrib.auth import authenticate
from django.contrib.auth import logout
from django.contrib.auth import login
from rest_framework import status
from .managers import *



#—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ö—Ä–∞–Ω—è—Ç—å—Å—è –ø–æ –∞–¥—Ä–µ—Å—É NewsSite\Main\site_pages
# —Ç–µ—Å—Ç–æ–≤e –∞–∫–∫–∞—É–Ω—Ç—ã

# –∞–¥–º–∏–Ω
# login: sus | pass: 123

# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
# login: user | pass: 123

def my_login(request):

    if request.method == 'GET':

        error = ''
        try:
            if request.GET['error'] != '':
                error = request.GET['error']
        except Exception as ex:
            pass
        print(error)
        return render(request, 'login.html', {'login': LoginFrom(), 'error': error})

def my_logout(request):
    if request.method == 'GET':
        logout(request)
        return redirect(f'/{request.GET["redir"].replace("/", "") }')
    else:
        return HttpResponse('(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª –≠–¢–ê –§–£–ù–ö–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –¢–û–õ–¨–ö–û –° GET !!!')

def registration_page(request): # 127.0.0.1:8000/reg/
    if request.method == 'GET':
        return render(request, 'reg.html', { 'reg': RegForm() })
    elif request.method == 'POST':
        regform = RegForm(request.POST)
        if regform.is_valid():
            try:
                User_count = MyUsers.objects.filter(Login =regform.cleaned_data['Login']).count()
                if User_count > 0:
                    return render(request, 'reg.html', {'reg': RegForm(), 'error': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Login —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ !'})
                else:
                    user = regform.save(commit=False) # user.password = hashlib.sha256(bytes(regform.cleaned_data['password'], 'utf-8')).hexdigest()
                    user.set_password(regform.cleaned_data['password'])
                    user.save()
            except:
                return render(request, 'reg.html', { 'reg': RegForm(), 'error': '—É–ø—Å, –≥–¥–µ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–æ—á–∫–∞ üò®'} )
        else:
            try:
                regform.clean()
            except Exception as ex:
                return render(request, 'reg.html', {'reg': RegForm(), 'error': ex.args[0]})

        return redirect('/')

def index(request): # 127.0.0.1:8000/
    posts = Posts.objects.order_by('-id')[0:10]  # posts = Posts.objects.filter(id__range =(0, 10))

    if request.method == 'POST':

        loginform = LoginFrom(request.POST)
        if loginform.is_valid():
            user = authenticate(Login=loginform.cleaned_data['Login'], password=loginform.cleaned_data['password'])
            print(user)
            if (user is not None):
                login(request, user)
                return render(request, 'main_page.html', {'posts': posts})
            else:
                return redirect('login/?&error=–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
        else:
            return HttpResponse('—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —É–ø—Å ‚ï∞(*¬∞‚ñΩ¬∞*)‚ïØ')
    else:
        return render(request, 'main_page.html', { 'posts' : posts } )

def post_create_page(request): # 127.0.0.1:8000/create_post/
    if request.method == 'POST':
        createpostfrom = PostForm(request.POST)

        try:
            if createpostfrom.is_valid():

                if not request.user.is_authenticated:
                    return render(request, 'create_post.html', {'create_post': PostForm(), 'error': '–≤—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç'})

                elif request.user.is_superuser != True:
                    return render(request, 'create_post.html', {'create_post': PostForm(), 'error': '—É –≤–∞—Å –Ω–µ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª'})

                else:
                    user = request.user
                    post = createpostfrom.save(commit=False)
                    post.UserID = user
                    post.save()

                    return  redirect('/')
            else:
                return HttpResponse('—Ñ–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª')

        except Exception as ex:
            return HttpResponse(f'–æ—à–∏–±–∫–∞: –Ω–µ –æ—á–µ–Ω—å –æ–∫–µ–π ‚ùå {ex.args[0]}')


    if request.method == 'GET':
        return render(request, 'create_post.html', { 'create_post' : PostForm() })

def post(request): # 127.0.0.1:8000/post/

    if request.method == 'GET':
        try:
            id = int(request.GET['postid'])
            post = Posts.objects.get(id=id)
            return render(request, 'post_by_id.html', { 'post' : post, 'comentform': commentform })
        except Exception as ex:
            print(f'–æ—à–∏–±–∫–∞ {ex.args[0]}')


    if request.method == 'POST': # –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        try:
            id = int(request.GET['postid'].replace('/', ''))
            post = Posts.objects.get(id=id)

            comform = commentform(request.POST)

            if comform.is_valid():
                if not request.user.is_authenticated:
                    return render(request, 'post_by_id.html', {'post': post, 'comentform': commentform, 'error': '–≤—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∞–∫–∞—É–Ω—Ç ‚ö†'})

                else:
                    user = request.user
                    comment = comform.save(commit=False)

                    comment.PostID = post;

                    comment.UserID = user;
                    comment.save();

                    return render(request, 'post_by_id.html', {'post': post, 'comentform': commentform })
            else:
                return HttpResponse('—Ñ–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª')

        except Exception as ex:
            return render(request, 'post_by_id.html', {'post': post, 'comentform': commentform, 'error': ex.args[0]})

def post_by_category(request): # 127.0.0.1:8000/post/category/
    try:
        id = int(request.GET['cid']) # –≤ –±–∞–∑–µ –µ—Å—Ç—å 9 –∏ 3
        posts = Posts.objects.filter(CategoryID=PostCategory.objects.get(id=id))
        return render(request, 'get_post_by_category.html', {'posts' : posts})

    except Exception as ex:
        print(ex.args[0])
        return HttpResponse(ex.args[0])

def debug(request):
    return render(request, 'logout.html')

def delete_comment(request):

    if request.method == 'GET':
        print(request.user)
        if not request.user.is_authenticated:
            return HttpResponse('–í–û–ô–î–ò–¢–ï –°–ù–ê–ß–ê–õ–ê –í –ê–ö–ö–ê–£–ù–¢ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª')
        else:
            try:
                Login = request.user.Login
                id = int(request.GET['id'])
                post_id = int(request.GET['pid'])

                if id != None:
                    comment = Comments.objects.get(id = id)
                    print(comment, id)
                    if comment.UserID.Login == Login:
                        print(comment)
                        comment.delete()
                        coments = Comments.objects.filter(PostID=post_id).order_by('-Datee')
                        to_return = {'comments': []}
                        for com in coments:
                            if com.ParentCommentID is None:
                                to_return['comments'].append(
                                    {'id': str(com.id), 'text': str(com.CommentText), 'dat': str(com.Datee)[0:19], 'name': com.UserID.Login, 'parent': com.ParentCommentID})
                            else:
                                pass

                        return HttpResponse(json.dumps(to_return, ensure_ascii=False));  # json.dumps( {'sus' : ['dfdf', 'fdfdf', 'dfdds'] } | json.dumps(coments.__dict__)
                        #return HttpResponse('—É—Å–ø–µ—Ö (¬¨‚Äø¬¨)')
                    else:
                        return HttpResponse('–ù–ï–õ–¨–ó–Ø –£–î–ê–õ–Ø–¢–¨ –ß–£–ñ–ò–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –ë–ï–ó –ü–†–ê–í –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª')

            except Exception as ex:
                return HttpResponse(f'–æ–ø—è—Ç—å –æ—à–∏–±–∫–∞: {ex.args[0]} (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª')
    else:
        return HttpResponse('–†–ê–ë–û–¢–ê–¢–¨ –° delete_comment –ú–û–ñ–ù–û –¢–û–õ–¨–ö–û –ß–ï–†–ï–ó POST (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª')

def change_comment(request):

    if request.method == 'GET':
        print(request.user)
        if not request.user.is_authenticated:
            return HttpResponse('–í–û–ô–î–ò–¢–ï –°–ù–ê–ß–ê–õ–ê –í –ê–ö–ö–ê–£–ù–¢ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª')
        else:
            try:
                Login = request.user.Login
                id = int(request.GET['id'])
                post_id = int(request.GET['pid'])
                text = request.GET['text']

                if id != None:
                    comment = Comments.objects.get(id = id)
                    print(comment, id)
                    if comment.UserID.Login == Login:
                        comment.CommentText = text
                        comment.save()
                        print(comment)
                        coments = Comments.objects.filter(PostID=post_id).order_by('-Datee')
                        to_return = {'comments': []}
                        for com in coments:
                            if com.ParentCommentID is None:
                                to_return['comments'].append(
                                    {'id': str(com.id), 'text': str(com.CommentText), 'dat': str(com.Datee)[0:19], 'name': com.UserID.Login, 'parent': com.ParentCommentID})
                            else:
                                pass

                        return HttpResponse(json.dumps(to_return, ensure_ascii=False));  # json.dumps( {'sus' : ['dfdf', 'fdfdf', 'dfdds'] } | json.dumps(coments.__dict__)
                        #return HttpResponse('—É—Å–ø–µ—Ö (¬¨‚Äø¬¨)')
                    else:
                        return HttpResponse('–ù–ï–õ–¨–ó–Ø –£–î–ê–õ–Ø–¢–¨ –ß–£–ñ–ò–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –ë–ï–ó –ü–†–ê–í –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª')

            except Exception as ex:
                return HttpResponse(f'–æ–ø—è—Ç—å –æ—à–∏–±–∫–∞: {ex.args[0]} (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª')
    else:
        return HttpResponse('–†–ê–ë–û–¢–ê–¢–¨ –° delete_comment –ú–û–ñ–ù–û –¢–û–õ–¨–ö–û –ß–ï–†–ï–ó POST (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª')

def get_comments(request): # 127.0.0.1:8000/post/get_comments
    if request.method == 'GET':
        try:
            post_id = int(request.GET['cid'])
            coments = Comments.objects.filter(PostID = post_id).order_by('-Datee')
            to_return = { 'comments' : [] }
            for com in coments:
                if com.ParentCommentID is None:
                    to_return['comments'].append( { 'id': str(com.id) ,'text' : str(com.CommentText), 'dat' : str(com.Datee)[0:19], 'name' : com.UserID.Login, 'parent' : com.ParentCommentID } )
                else:
                    pass

            return HttpResponse( json.dumps(to_return, ensure_ascii=False)); # json.dumps( {'sus' : ['dfdf', 'fdfdf', 'dfdds'] } | json.dumps(coments.__dict__)
        except Exception as ex:
            return HttpResponse(f"–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ {ex.args[0]}")